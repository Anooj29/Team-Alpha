DATE: 20-07-2024

Object Oriented Programming:

	Classes: 
		Blueprint or template for creating objects. Define attributes (data) and methods (functions).

		example

		class Car:
		    def __init__(self, make, model):
		        self.make = make
		        self.model = model
		    
		    def display_info(self):
		        print(f"Car: {self.make} {self.model}")

	Objects: 
		Instances of classes that encapsulate data (attributes) and behavior (methods).

		example 
			# Objects of the class car used in example of classes
			car1 = Car("Toyota", "Camry") 
			car2 = Car("Honda", "Accord")


	Concepts of OOP:

		1] Inheritance:

			Inheritance is a key feature in Object-Oriented Programming that allows subclass to inherit the attributes and methods from superclass. This promotes code reuse and facilitates the creation of hierarchical relationships among classes.

			Superclass (Base Class): The class whose attributes and methods are inherited by another class.
			Subclass (Derived Class): The class that inherits attributes and methods from a superclass.


		2] Polymorphism:

			Polymorphism is the ability of different objects to respond to the same method calls or operations in different ways. It allows objects of different classes to be treated as objects of a common superclass, providing flexibility and enhancing code reuse.


		3] Encapsulation:

			Encapsulation is the bundling of data and methods that operate on the data into a single unit (class). It restricts direct access to some of an object's components and hides the internal state and implementation details from the outside world.


		4] Data Abstraction:

			Data Abstraction in Object-Oriented Programming refers to the concept of displaying only essential information to the outside world and hiding the implementation details. It focuses on what an object does rather than how it does it, providing a simplified view of complex systems.