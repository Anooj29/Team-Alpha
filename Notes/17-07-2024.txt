Data structure in python helps to organize, manage, and store data efficiently.

Main Data structures in Python are:

1) Lists: 
  
         Characteristics- >>Ordered-Order is defined
                          >>Mutable-Can be modified
                          >>Indexed-accessible by their index
         
         Operations- >>my_list = [1, 2, 3, 4, 5]
                     >>first_element = my_list[0]
                     >>sublist = my_list[1:3]
                     >>my_list.append(6)
                     >>my_list.insert(2, 'a')
                     >>my_list.remove(3)
                     >>last_element = my_list.pop()
                     >>for item in my_list:
                           print(item)
                     >>squared = [x**2 for x in my_list]

2) Tuples:

          Characteristics- >>Ordered-Defined order
                           >>Immutable-Cannot be changed
                           >>Indexed-accessible by their index

          Operations- >>my_tuple = (1, 2, 3, 4, 5)
                      >>first_element = my_tuple[0]
                      >>subtuple = my_tuple[1:3]
                      >>for item in my_tuple:
                             print(item)
                      >>a, b, c = (1, 2, 3)
 
3) Sets:

          Characteristics- >>Unordered-No defined order for elements
                           >>Mutable- Can add or remove elements
                           >>Unique elements-No duplicates allowed

          Operations- >>my_set = {1, 2, 3, 4, 5}
                      >>my_set.add(6)
                      >>my_set.remove(3)
                      >>another_set = {4, 5, 6, 7}
                        union = my_set | another_set
                        intersection = my_set & another_set
                        difference = my_set - another_set
                      >>for item in my_set:
                            print(item)

4) Dictionaries:

          Characteristics- >>Key-value pairs-Stores data in pairs
                           >>Mutable-Can change after creation
                           >>Unordered-No defined order in keys

          Operations- >>my_dict = {'a': 1, 'b': 2, 'c': 3}
                      >>value = my_dict['a']
                      >>my_dict['d'] = 4
                      >>for key, value in my_dict.items():
                             print(f'{key}: {value}')


Data Manipulation using list comprehensions and generator expressions

List Comprehensions: They provide a concise way to create lists. More readable and often faster than traditional for-loop methods

Basic syntax- >> [Expression for item in iterable if condition ]

Expression: The value or operation to produce elements.
Item: Variable representing the current item in the iteration.
Iterable: Collection being iterated over (e.g., list, tuple, string).
Condition (optional): Filter elements based on this condition.

Generator Expression: They are similar to list comprehensions but are more memory efficient as they generate items one at a time and only when needed. Suitable for larger data sets.

Basic syntax- >> (expression for item in iterable if condition)

List comprehensions and generator expressions are powerful tools in Python for efficient data manipulation. They help write concise, readable, and performant code. List comprehensions are great for creating lists quickly, while generator expressions are ideal for handling large datasets with low memory overhead.

Decorators and context managers are powerful tools in Python for managing resources and enhancing code functionality:

Decorator: They are functions that modify the behaviour of other functions or methods. They are often used for logging, access control, memorization and more.

Context Manager: They are used to manage resources such as file streams, database connections and locks. They ensure that resources are properly acquired and release.
