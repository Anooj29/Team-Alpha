DATE: 16-07-2024


Data Structure:

	A data structure is a way of organizing and storing data in a computer so that it can be accessed and modified efficiently. Different data structures are suited to different kinds of applications, and some are highly specialized to specific tasks.


	Different Types of Data Structures:

		1] List:
			A list is a collection of ordered, mutable items. Lists allow duplicate elements.

			Features:
				Elements are accessed by their index.
				Lists are dynamic and can grow or shrink as needed.
				They are defined using square brackets [].

			example:
				lst = [1, 2, 3, 4, 5]
				lst.append(6)  
				lst[1] = 10    
		2] Set:
			A set is a collection of unordered, unique items. Sets do not allow duplicate elements.

			Features:
			 	Elements are not accessed by an index
				Useful for membership testing and eliminating duplicate entries
				They are defined using curly braces {} or the set() function

			Example:
				my_set = {1, 2, 3, 4, 5}
				my_set.add(6)
				my_set.remove(3)

		3] Dictionary:
			A dictionary is a collection of key-value pairs. Each key is unique, and it maps to a value.

			Features:
				Allows for fast retrieval, addition, and deletion of key-value pairs.
				Keys must be immutable (e.g., strings, numbers, tuples).
				They are defined using curly braces {} with a colon separating keys and values.

			Example:
				dict = {"name": "Alice", "age": 25, "city": "New York"}
				dict["email"] = "alice@example.com"
				del dict["city"]

		4] Tuple:
			A tuple is a collection of ordered, immutable items. Tuples allow duplicate elements.

			Features:
				Elements are accessed by their index.
				Once created, elements cannot be modified, added, or removed.
				They are defined using parentheses ().

			Example:
				tup = (1, 2, 3, 4, 5)
				print(tup[0])


Data Manipulation:

	Data manipulation involves operations to transform or analyze data, often with the aim of preparing it for further analysis or presentation.

	Different types of manipulation (using list):

		Access: lst[index]

		Modify: lst[index] = new_value

		Add: lst.append(value) / lst.extend([values])

		Remove: lst.remove(value) / lst.pop(index)

		Slice: sub_lst = lst[start:end]